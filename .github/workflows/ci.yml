name: Continuous Integration

on: [push, pull_request]

permissions:
  contents: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-dotnet:
    name: "Build and Test (dotnet)"
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install dotnet coverage and sonarscanner
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-sonarscanner

      - name: Setup SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: dotnet-sonarscanner begin `
          /k:"snafetstheone_snafets-extensions-logging-tracesonerror" `
          /o:"snafetstheone" `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.coverageReportPaths="./coverage/SonarQube.xml" `
          /d:sonar.dotnet.excludeTestProjects=true `
          /d:sonar.coverage.exclusions=examples/**,tests\** `
          /d:sonar.qualitygate.wait=true `
          /d:sonar.qualitygate.timeout=300

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Coverage
        run: reportgenerator -reports:./coverage/**/*.xml -targetdir:./coverage -reporttypes:'SonarQube'

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
      - name: Pack
        run: dotnet pack --verbosity normal -c Release --no-restore --include-source --version-suffix alpha.${{ github.run_number }} -o ./dist

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkgs
          path: ./dist/*.*

  release:
    needs: build-dotnet
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Pack
        run: |
          VERSION="${{ github.ref_name }}"
          echo "Version: $VERSION"
          dotnet pack -c Release --include-source -p:Version=$VERSION -o ./dist src/TracesOnError/Snafets.Extensions.Logging.TracesOnError.csproj

      - name: Push
        run: dotnet nuget push ./dist/*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.*
